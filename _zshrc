export GOROOT=(go env GOROOT)
export GOPATH="$HOME/.gopath"
export GOENV_ROOT="$HOME/.goenv"
export PYENV_ROOT="$HOME/.pyenv"
export EDITOR=nvim
export TERM=tmux-256color
export PATH="$GOPATH/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/dotfiles/bin:$PATH"
export PATH="$HOME/.nodebrew/current/bin:$PATH"
export PATH="$HOME/.pyenv/shims:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.goenv/bin:$PATH"
# export ANACONDA_VERSION="anaconda3-2.5.0"
export ANACONDA_VERSION="anaconda3-2018.12"

alias ovim=vim
alias vim=nvim
alias diff=colordiff
alias g=git
alias k=kubectl
alias kc=kubectl
alias kg='kubectl get'
alias kd='kubectl describe'
alias sudo='sudo '
alias ls=exa
alias ll='exa -l --git'
alias la='exa -la --git'
alias lt='exa -l -T --git'
alias syncon='tmux set-window-option synchronize-panes on'
alias syncoff='tmux set-window-option synchronize-panes off'
alias mon='eval $(minikube docker-env)'
alias cabcaws='export AWS_DEFAULT_PROFILE=cabc'

function moff() {
  unset DOCKER_TLS_VERIFY
  unset DOCKER_HOST
  unset DOCKER_CERT_PATH
  unset DOCKER_API_VERSION
}

if [[ ! -e "$HOME/.nodebrew/src" ]]; then
  mkdir -p "$HOME/.nodebrew/src"
fi

eval "$(direnv hook zsh)"
eval "$(pyenv init -)"
eval "$(goenv init -)"

if [[ -n /usr/local/bin/rbenv ]]; then
  eval "$(rbenv init -)"
fi

powerline=""
if [[ -e $HOME/.pyenv/versions/$ANACONDA_VERSION/bin/powerline-shell ]]; then
  powerline=$HOME/.pyenv/versions/$ANACONDA_VERSION/bin/powerline-shell
elif [[ -e $HOME/.pyenv/versions/$ANACONDA_VERSION/envs/py37/bin/powerline-shell ]]; then
  powerline=$HOME/.pyenv/versions/$ANACONDA_VERSION/envs/py37/bin/powerline-shell
fi

function powerline_precmd() {
  if [[ -n "$powerline" ]]; then
    PS1="$($powerline --shell zsh $?)"
  fi
}

function install_powerline_precmd() {
  if [[ -n "$powerline" ]]; then
    for s in "${precmd_functions[@]}"; do
      if [ "$s" = "powerline_precmd" ]; then
        return
      fi
    done
    precmd_functions+=(powerline_precmd)
  fi
}

if [ "$TERM" != "linux" ]; then
  install_powerline_precmd
fi

# pythonはanaconda入れて.python.shにあるpyenvを作る
export CLOUDSDK_PYTHON=$PYENV_ROOT/versions/$ANACONDA_VERSION/envs/py27/bin/python
# gclond-sdkは下記の場所にインストールする必要がある
source ~/google-cloud-sdk/path.zsh.inc
source ~/google-cloud-sdk/completion.zsh.inc

source ~/dotfiles/.python.sh
source ~/dotfiles/.gcp_cmd.sh
if [[ -e ~/.cargo/env ]]; then
  source ~/.cargo/env
fi

if [[ -e $HOME/.pyenv/versions/$ANACONDA_VERSION/bin/aws_zsh_completer.sh ]]; then
  source $HOME/.pyenv/versions/$ANACONDA_VERSION/bin/aws_zsh_completer.sh
fi
if [[ -e /usr/local/opt/avr-gcc@7/bin ]]; then
  export PATH="/usr/local/opt/avr-gcc@7/bin:$PATH"
fi
if [[ -e "$HOME/bin/kube.sh" ]]; then
  source $HOME/bin/kube.sh
fi
export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"

export ZPLUG_HOME=/usr/local/opt/zplug
source $ZPLUG_HOME/init.zsh
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"
zplug "peco/peco", as:command, from:gh-r, use:"*amd64*"
zplug "rupa/z", use:z.sh
zplug "Tarrasch/zsh-bd"
zplug "mollifier/cd-gitroot"
zplug "b4b4r07/enhancd", use:enhancd.sh
zplug "nnao45/zsh-kubectl-completion"
zplug load

export ENHANCD_FILTER=fzy:peco

function peco-history-selection() {
    BUFFER=`history -n 1 | tail -r  | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    PS1="$($powerline --shell zsh $?)"
    zle reset-prompt
}
zle -N peco-history-selection
bindkey '^R' peco-history-selection

export VIMODE='[i]'
function zle-keymap-select {
  case $KEYMAP in
    main|viins)
      VIMODE='[i]';;
    vicmd)
      VIMODE='[n]';;
    vivis|vivli)
      VIMODE='[v]';;
  esac
  powerline_precmd
  zle reset-prompt
}
zle -N zle-keymap-select
# vimのキーバインドを使う
bindkey -v

function peco-ghq-look () {
    # brew install binutils findutils diffutils coreutils moreutils
    local ghq_roots="$(git config --path --get-all ghq.root)"
    local selected_dir=$(ghq list --full-path | \
        xargs -I{} /usr/local/opt/coreutils/libexec/gnubin/ls -dl --time-style=+%s {}/.git | sed 's/.*\([0-9]\{10\}\)/\1/' | sort -nr | \
        sed "s,.*\(${ghq_roots/$'\n'/\|}\)/,," | \
        sed 's/\/.git//' | \
        peco --prompt="cd-ghq >" --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd $(ghq list --full-path | grep --color=never -E "/$selected_dir$")"
        zle accept-line
    fi
}

zle -N peco-ghq-look
bindkey '^G' peco-ghq-look

# 自動補完を有効にする
# コマンドの引数やパス名を途中まで入力して <Tab> を押すといい感じに補完してくれる
# 例： `cd path/to/<Tab>`, `ls -<Tab>`
autoload -U compinit; compinit

# 入力したコマンドが存在せず、かつディレクトリ名と一致するなら、ディレクトリに cd する
# 例： /usr/bin と入力すると /usr/bin ディレクトリに移動
setopt auto_cd

# cd した先のディレクトリをディレクトリスタックに追加する
# ディレクトリスタックとは今までに行ったディレクトリの履歴のこと
# `cd +<Tab>` でディレクトリの履歴が表示され、そこに移動できる
setopt auto_pushd

# pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない
setopt pushd_ignore_dups

# 拡張 glob を有効にする
# glob とはパス名にマッチするワイルドカードパターンのこと
# （たとえば `mv hoge.* ~/dir` における "*"）
# 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
# どういう意味を持つかは `man zshexpn` の FILENAME GENERATION を参照
setopt extended_glob

# 入力したコマンドがすでにコマンド履歴に含まれる場合、履歴から古いほうのコマンドを削除する
# コマンド履歴とは今まで入力したコマンドの一覧のことで、上下キーでたどれる
setopt hist_ignore_all_dups

# コマンドがスペースで始まる場合、コマンド履歴に追加しない
# 例： <Space>echo hello と入力
setopt hist_ignore_space

# <Tab> でパス名の補完候補を表示したあと、
# 続けて <Tab> を押すと候補からパス名を選択できるようになる
# 候補を選ぶには <Tab> か Ctrl-N,B,F,P
zstyle ':completion:*:default' menu select=1

# 単語の一部として扱われる文字のセットを指定する
# ここではデフォルトのセットから / を抜いたものとする
# こうすると、 Ctrl-W でカーソル前の1単語を削除したとき、 / までで削除が止まる
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# 履歴ファイルの保存先
export HISTFILE=${HOME}/.zsh_history

# メモリに保存される履歴の件数
export HISTSIZE=1000

# 履歴ファイルに保存される履歴の件数
export SAVEHIST=100000

# 重複を記録しない
setopt hist_ignore_dups

# 開始と終了を記録
setopt EXTENDED_HISTORY

# historyの共有
setopt share_history

# 余分な空白は詰めて記録
setopt hist_reduce_blanks

# 古いコマンドと同じものは無視 
setopt hist_save_no_dups

# historyコマンドは履歴に登録しない
setopt hist_no_store

# 補完時にヒストリを自動的に展開
setopt hist_expand

# 履歴をインクリメンタルに追加
setopt inc_append_history
