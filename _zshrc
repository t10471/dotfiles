export PATH="/usr/local/bin:$HOME/go/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
export PYENV_ROOT="$HOME/.pyenv"
export GOPATH="$HOME/go"
export EDITOR=nvim
export TERM=tmux-256color
# workaround git gettext problem
export GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1

eval "$(/opt/homebrew/bin/brew shellenv)"
eval "$(starship init zsh)"
export PATH="$PATH:$HOME/.poetry/bin"
eval "$(direnv hook zsh)"
eval "$(pyenv init -)"
export NODEBREW_ROOT=/opt/homebrew/var/nodebrew

if [[ -n /usr/local/bin/rbenv ]]; then
  eval "$(rbenv init -)"
fi

if [[ ! -e "$HOME/.nodebrew/src" ]]; then
  mkdir -p "$HOME/.nodebrew/src"
fi
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

source $HOME/.path.sh

alias ovim=vim
alias vim=nvim
alias diff=colordiff
alias g=git
alias k=kubectl
alias kc=kubectl
alias kg='kubectl get'
alias kd='kubectl describe'
alias sudo='sudo '
alias ls=exa
alias ll='exa -l --git'
alias la='exa -la --git'
alias lt='exa -l -T --git'
alias syncon='tmux set-window-option synchronize-panes on'
alias syncoff='tmux set-window-option synchronize-panes off'


export GREP_OPTIONS='--color=auto'

# gclond-sdkは下記の場所にインストールする必要がある
export CLOUDSDK_PYTHON=/Users/toshinao/.pyenv/versions/3.10.3/bin/python
source ~/google-cloud-sdk/path.zsh.inc
source ~/google-cloud-sdk/completion.zsh.inc

source ~/dotfiles/.gcp_cmd.sh
if [[ -e ~/.cargo/env ]]; then
  source ~/.cargo/env
fi

if [[ -e "$HOME/bin/kube.sh" ]]; then
  source $HOME/bin/kube.sh
fi
export ZPLUG_HOME=/opt/homebrew/opt/zplug
source $ZPLUG_HOME/init.zsh
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "nnao45/zsh-kubectl-completion"
zplug "rupa/z", use:z.sh
zplug "Tarrasch/zsh-bd"
zplug "mollifier/cd-gitroot"
zplug "b4b4r07/enhancd", use:init.sh
zplug load

export ENHANCD_FILTER=fzf

bindkey -e

function select-history() {
  BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
  CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

# fkill - kill process
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}


# 自動補完を有効にする
# コマンドの引数やパス名を途中まで入力して <Tab> を押すといい感じに補完してくれる
# 例： `cd path/to/<Tab>`, `ls -<Tab>`
autoload -U compinit; compinit

# 入力したコマンドが存在せず、かつディレクトリ名と一致するなら、ディレクトリに cd する
# 例： /usr/bin と入力すると /usr/bin ディレクトリに移動
setopt auto_cd

# cd した先のディレクトリをディレクトリスタックに追加する
# ディレクトリスタックとは今までに行ったディレクトリの履歴のこと
# `cd +<Tab>` でディレクトリの履歴が表示され、そこに移動できる
setopt auto_pushd

# pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない
setopt pushd_ignore_dups

# 拡張 glob を有効にする
# glob とはパス名にマッチするワイルドカードパターンのこと
# （たとえば `mv hoge.* ~/dir` における "*"）
# 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
# どういう意味を持つかは `man zshexpn` の FILENAME GENERATION を参照
setopt extended_glob

# 入力したコマンドがすでにコマンド履歴に含まれる場合、履歴から古いほうのコマンドを削除する
# コマンド履歴とは今まで入力したコマンドの一覧のことで、上下キーでたどれる
setopt hist_ignore_all_dups

# コマンドがスペースで始まる場合、コマンド履歴に追加しない
# 例： <Space>echo hello と入力
setopt hist_ignore_space

# <Tab> でパス名の補完候補を表示したあと、
# 続けて <Tab> を押すと候補からパス名を選択できるようになる
# 候補を選ぶには <Tab> か Ctrl-N,B,F,P
zstyle ':completion:*:default' menu select=1

# 単語の一部として扱われる文字のセットを指定する
# ここではデフォルトのセットから / を抜いたものとする
# こうすると、 Ctrl-W でカーソル前の1単語を削除したとき、 / までで削除が止まる
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# 履歴ファイルの保存先
export HISTFILE=${HOME}/.zsh_history

# メモリに保存される履歴の件数
export HISTSIZE=1000

# 履歴ファイルに保存される履歴の件数
export SAVEHIST=100000

# 重複を記録しない
setopt hist_ignore_dups

# 開始と終了を記録
setopt EXTENDED_HISTORY

# historyの共有
setopt share_history

# 余分な空白は詰めて記録
setopt hist_reduce_blanks

# 古いコマンドと同じものは無視
setopt hist_save_no_dups

# historyコマンドは履歴に登録しない
setopt hist_no_store

# 補完時にヒストリを自動的に展開
setopt hist_expand

# 履歴をインクリメンタルに追加
setopt inc_append_history

setopt nonomatch


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/toshinao/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/toshinao/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/toshinao/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/toshinao/google-cloud-sdk/completion.zsh.inc'; fi

# hyper settings start

# Override auto-title when static titles are desired ($ title My new title)
title() { export TITLE_OVERRIDDEN=1; echo -en "\e]0;$*\a"}
# Turn off static titles ($ autotitle)
autotitle() { export TITLE_OVERRIDDEN=0 }; autotitle
# Condition checking if title is overridden
overridden() { [[ $TITLE_OVERRIDDEN == 1 ]]; }
# Echo asterisk if git state is dirty
gitDirty() { [[ $(git status 2> /dev/null | grep -o '\w\+' | tail -n1) != ("clean"|"") ]] && echo "*" }

# Show cwd when shell prompts for input.
tabtitle_precmd() {
   if overridden; then return; fi
   pwd=$(pwd) # Store full path as variable
   cwd=${pwd##*/} # Extract current working dir only
   print -Pn "\e]0;$cwd$(gitDirty)\a" # Replace with $pwd to show full path
}
[[ -z $precmd_functions ]] && precmd_functions=()
precmd_functions=($precmd_functions tabtitle_precmd)

# Prepend command (w/o arguments) to cwd while waiting for command to complete.
tabtitle_preexec() {
   if overridden; then return; fi
   printf "\033]0;%s\a" "${1%% *} | $cwd$(gitDirty)" # Omit construct from $1 to show args
}
[[ -z $preexec_functions ]] && preexec_functions=()
preexec_functions=($preexec_functions tabtitle_preexec)

# hyper settings end
