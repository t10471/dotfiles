# deinの遅延読み込みの際の条件指定
# on_ft     ファイルタイプがマッチしたとき。String or List
# on_path   パスが一致した時
# on_func   呼び出し機能が一致した時
# on_source プラグインがロードされたとき
# on_cmd    コマンドが一致した時
# on_map    キーが一致した時
# on_i      on_event が奨励
# on_event  eventが発生したら
#           http://vim-jp.org/vimdoc-ja/autocmd.html#autocmd-events

# denite {{{
[[plugins]] # Plugin to easily access Most Recently Used (MRU) files
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
on_path = '.*'

[[plugins]] # Yank
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'
on_event = 'TextYankPost'

# [[plugins]] # 補完
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_event = 'InsertEnter'
# do = ':UpdateRemotePlugins'
# hook_source = '''
#   let g:deoplete#enable_at_startup = 1
#   let g:deoplete#enable_ignore_case = 1
#   let g:deoplete#enable_smart_case = 1
#   let g:deoplete#sources = {}
#   let g:deoplete#sources.go = ['buffer', 'go']
#
#   " <TAB>: completion.
#   imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
#   function! s:check_back_space() abort
#     let col = col('.') - 1
#     return !col || getline('.')[col - 1]  =~ '\s'
#   endfunction
#
#   " <S-TAB>: completion back.
#   inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
# '''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_post_source = '''
  call denite#custom#option('default', 'prompt', '>')

  " カーソルキーで移動
  call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')
  call denite#custom#map('insert', '<c-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<c-p>', '<denite:move_to_previous_line>', 'noremap')

  " file_rec
  if executable('fd')
    call denite#custom#alias('source', 'file_rec', 'file_rec')
    " fd --follow --hidden --exclude '.git' --type f
    call denite#custom#var('file_rec', 'command', ['fd', '--follow', '--hidden', '--exclude', '.git', '--type', 'f', ''])
  elseif executable('rg')
    call denite#custom#var('file_rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])
  endif

  " grep
  if executable('rg')
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  elseif executable('pt')
    call denite#custom#var('grep', 'command', ['pt'])
    call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
'''
hook_add = '''
  nmap <silent> \ut :,Denite filetype<CR>
  nmap <silent> \ub :,Denite buffer<CR>
  nmap <silent> \uf :,Denite file_rec<CR>
  nmap <silent> \ul :,Denite line<CR>
  nmap <silent> \ug :,Denite grep<CR>
  nmap <silent> \u] :,DeniteCursorWord grep<CR>
  nmap <silent> \uc :,Denite colorscheme<CR>
  nmap <silent> \um :,Denite file_mru<CR>
  nmap <silent> \uy :,Denite neoyank<CR>
  nmap <silent> \ur :,Denite -resume<CR>
  nmap <silent> \u; :,Denite -resume -immediately -select=+1<CR>
  nmap <silent> \u- :,Denite -resume -immediately -select=-1<CR>
'''
# }}}

# nerdtree {{{
[[plugins]]
repo = 'scrooloose/nerdtree'
augroup = 'NERDTreeHijackNetrw'
depends = ['ctrlp-nerdtree.vim', 'nerdtree-git-plugin']
hook_source = '''
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  let g:NERDTreeShowHidden=1
'''
hook_add = '''
  nmap <silent> <C-e> :NERDTreeToggle<CR>
  vmap <silent> <C-e> <Esc> :NERDTreeToggle<CR>
  omap <silent> <C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'voronkovich/ctrlp-nerdtree.vim'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "➜",
    \ "Staged"    : "✭",
    \ "Untracked" : "✚",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
'''

# }}}

# base {{{

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['ghcmod-vim', 'tsuquyomi']

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <silent><C-L> <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-L> <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-L> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
  let s:my_snippet = '~/.vim/snippets'
  let g:neosnippet#snippets_directory = s:my_snippet
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i  = 1

# quickfixウィンドウ内でrを押すと、各行のテキスト部分が別バッファに書き出される。
# http://thinca.hatenablog.com/entry/20081107/1225997310
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = ['Qfreplace']


# :VO :set setの結果を確認するのに便利 http://nanasi.jp/articles/vim/viewoutput_vim.html
[[plugins]]
repo = 'vim-scripts/ViewOutput'
on_cmd = ['VO']

# 整列
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {n = '<Plug>'}
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_source = '''
  let g:easy_align_delimiters = {
              \ '>': { 'pattern': '>>\|=>\|>' },
              \ '/': {
              \     'pattern':         '//\+\|/\*\|\*/',
              \     'delimiter_align': 'l',
              \     'ignore_groups':   ['!Comment'] },
              \ ']': {
              \     'pattern':       '[[\]]',
              \     'left_margin':   0,
              \     'right_margin':  0,
              \     'stick_to_left': 0
              \   },
              \ ')': {
              \     'pattern':       '[()]',
              \     'left_margin':   0,
              \     'right_margin':  0,
              \     'stick_to_left': 0
              \   },
              \ 'd': {
              \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
              \     'left_margin':  0,
              \     'right_margin': 0
              \   }
              \ }
'''

# 閉じ括弧の補完
[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1


# コメントアウト
[[plugins]]
repo = 'tyru/caw.vim'
on_map = {vnx = '<Plug>'}
hook_add = '''
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

# Rで置換 yiwで単語をヤンクして変換したい個所に行きRiwで置換
# .を使うと同じ操作が他でもできる
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'kana/vim-operator-user'
on_map = {nvx = '<Plug>'}
hook_post_source = '''
  map R  <Plug>(operator-replace)
'''
# }}}

# vim {{{
[[plugins]]
repo = 'vim-jp/vim-vimlparser'
on_ft = ['vim']

[[plugins]]
repo = 'syngan/vim-vimlint'
on_ft = ['vim']
hook_source = '''
  let g:vimlint#config = {
              \ 'EVL102': 1,
              \ 'EVL103': 1,
              \ 'EVL105': 1,
              \ 'EVL201': 1,
              \ 'EVL204': 1,
              \ 'EVL205': 1
              \ }
'''

# http://thinca.hatenablog.com/entry/20090625/1245864363
[[plugins]]
repo = 'thinca/vim-prettyprint'
on_ft = ['vim']

# vim変数の書き換え
[[plugins]]
repo = 'thinca/vim-editvar'
on_ft = ['vim']
# }}}

# haskell {{{
[[plugins]]
repo = 'kana/vim-filetype-haskell'
on_ft = ['haskell']

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
hook_add = '''
  augroup HaskellAugroup
    autocmd!
    " 使うにはcabal install ghc-modが必要
    " :GhcModTypeでカーソルがあるところの型が表示され
    " :GhcModTypeClearでハライトが消える
    autocmd FileType haskell nnoremap <Space>g :GhcModType<CR>
    autocmd FileType haskell nnoremap <Space>c :GhcModTypeClear<CR>
  augroup END
'''
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/neco-ghc'
on_ft = ['haskell']
hook_source = '''
  setlocal omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'dag/vim2hs'
hook_source = '''
  " \をラムダにするのをやめる
  let g:haskell_conceal = 0
'''
on_ft = ['haskell']

[[plugins]]
repo = 'pbrisbin/vim-syntax-shakespeare'
on_ft = ['haskell']

[[plugins]]
repo = 'wting/lhaskell.vim'
on_ft = ['haskell']
# }}}}

# c c++用 {{{
[[plugins]]
repo = 'osyo-manga/vim-marching'
on_ft = ['c', 'cpp']
hook_source = '''
  let g:marching_clang_command = '/usr/bin/clang'
  " オプションを追加する
  " filetype=cpp に対して設定する場合
  let g:marching#clang_command#options = {'cpp' : '-std=gnu++1y'}
  " インクルードディレクトリのパスを設定
  " let g:marching_include_paths = [
  " \]
  " neocomplete.vim と併用して使用する場合
  let g:marching_enable_neocomplete = 1
  " 処理のタイミングを制御する
  " 短いほうがより早く補完ウィンドウが表示される
  " ただし、marching.vim 以外の処理にも影響するので注意する
  " set updatetime=200
'''
[[plugins]]
repo = 'vim-scripts/c.vim'
on_ft = ['c']

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp']


[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_source = '''
  let g:clang_format#command = 'clang-format-3.5'
  " ========== vim-clang-format の設定 ============
  " アクセス指定子は1インデント分下げる
  " 短い if 文は1行にまとめる
  " テンプレートの宣言(template<class ...>)後は必ず改行する
  " C++11 の機能を使う
  " {} の改行は Stroustrup スタイル（関数宣言時の { のみ括弧前で改行を入れる）
  let g:clang_format#style_options = {
              \ 'AccessModifierOffset' : -4,
              \ 'AllowShortIfStatementsOnASingleLine' : 'true',
              \ 'AlwaysBreakTemplateDeclarations' : 'true',
              \ 'Standard' : 'C++11',
              \ 'BreakBeforeBraces' : 'Stroustrup',
              \}
'''
on_ft = ['c', 'cpp']
# }}}}

# python  {{{
# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# depends = ['deoplete.nvim', 'jedi-vim']
# on_ft = ['python', 'python3', 'djangohtml']
#
# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# hook_source = '''
#   let g:jedi#auto_initialization = 0
#   let g:jedi#completions_enabled = 0
#   let g:jedi#auto_vim_configuration = 0
#   let g:jedi#smart_auto_mappings = 0
#   let g:jedi#rename_command = '<Leader>R'
# '''

[[plugins]]
repo = 'nvie/vim-flake8'
hook_source = '''
  let g:no_flake8_maps = 1
  let g:flake8_show_in_gutter=1
'''
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'vim-scripts/python_fold'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'tshirtman/vim-cython'
on_ft = ['cython']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['jinja']
# }}}}

# ruby {{{
[[plugins]]
repo = 'alpaca-tc/alpaca_tags'
on_ft = ['ruby']

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_ft = ['ruby']

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby']
# }}}}

# javascript jsx {{{
[[plugins]]
repo = 'neovim/node-host'
build = 'npm install'
on_ft = ['javascript', 'jsx', 'javascript.jsx']


[[plugins]]
repo = 'billyvg/tigris.nvim'
build = './install.sh'
on_ft = ['javascript', 'jsx', 'javascript.jsx']
hook_source = '''
  let g:tigris#enabled = 1
  let g:tigris#on_the_fly_enabled = 1
  let g:tigris#delay = 300
'''

# }}}}

# typescript {{{
repo = 'Quramy/tsuquyomi'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'Quramy/vim-js-pretty-template'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'Quramy/vim-dtsm'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'mhartington/vim-typings'
on_ft = ['ts', 'typescript']
# }}}}

# elm {{{
[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = ['elm']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['elm']
# }}}}

# fish {{{
[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']
# }}}}

# go {{{
# [[plugins]]
# repo = 'zchee/deoplete-go'
# build = 'make'
# depends = ['deoplete.nvim']
# on_ft = ['go']
# hook_source = '''
#   let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
#   let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
#   let g:deoplete#sources#go#package_dot = 1
# '''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_source = '''
  "" highlight
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_term_enabled = 1
  " let g:go_auto_type_info = 1
  "" GoFmt時にインポートするパッケージを整理(GoFmtはファイル書き込み時に自動的に実行される)
  let g:go_fmt_command = "goimports"
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''
hook_add = '''
  augroup Gogroup 
    autocmd!
    " autocmd FileType go nmap <Space>go <Plug>(go-info)
    " autocmd FileType go nmap <Space>gr <Plug>(go-run)
    " autocmd FileType go nmap <Space>gb <Plug>(go-build)
    " autocmd FileType go nmap <Space>gt <Plug>(go-test)
    " autocmd FileType go nmap <Space>gc <Plug>(go-coverage)
    " autocmd FileType go nmap <Space>gd <Plug>(go-doc)
    " autocmd FileType go nmap <Space>gv <Plug>(go-doc-vertical)
    " autocmd FileType go nmap <Space>gi <Plug>(go-import)
    " autocmd FileType go nmap <Space>gm <Plug>(go-implements)
    " autocmd FileType go nmap <Space>df <Plug>(go-def)
    " autocmd FileType go nmap <Space>ds <Plug>(go-def-split)
    " autocmd FileType go nmap <Space>dv <Plug>(go-def-vertical)
    " autocmd FileType go nmap <Space>dt <Plug>(go-def-tab)
    autocmd FileType go :highlight goErr cterm=bold ctermfg=211
    autocmd FileType go :match goErr /\<err\>/
  augroup END
'''
# }}}}

# nginx {{{
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']
# }}}}

# docker {{{
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile']
# }}}}

# yaml {{{
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['yaml']
hook_source = '''
  let g:ansible_options = {'ignore_blank_lines': 0}
'''
[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = ['yaml']
# }}}}

# markdown  {{{
[[plugins]]
repo = 'vim-scripts/Markdown'
on_ft = ['markdown']
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
[[plugins]]
repo = 'euclio/vim-markdown-composer'
on_ft = ['markdown']
build = 'cargo build --release'
# }}}}

# json {{{
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''
# }}}}

# toml {{{
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
# }}}}

# solidity {{{
repo = 'tomlion/vim-solidity'
on_ft = ['solidity']
# }}}}

# rust {{{
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
  let g:rustfmt_autosave = 1
  let g:rust_clip_command = 'pbcopy'
'''

# DeopleteRustShowDocumentationが微妙なのでコメントアウト
# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
# on_ft = ['rust']
# depends = ['deoplete.nvim']
# hook_source = '''
#   function! ChompedSystem( ... )
#     return substitute(call('system', a:000), '\n\+$', '', '')
#   endfunction
#
#   let g:deoplete#sources#rust#racer_binary = $HOME . '/.cargo/bin/racer'
#   let g:deoplete#sources#rust#rust_source_path = ChompedSystem("rustc --print sysroot") . '/lib/rustlib/src/rust/src'
#   let g:deoplete#sources#rust#show_duplicates = 1
#   let g:deoplete#sources#rust#disable_keymap = 1
#   nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
#   nmap <buffer> K  <plug>DeopleteRustShowDocumentation
# '''
[[plugins]]
repo = 'timonv/vim-cargo'
on_ft = ['rust']
hook_source = '''
  let g:cargo_command = "!cargo {cmd}"
'''
# https://github.com/rust-lang-nursery/rustfmt
# https://github.com/rust-lang-nursery/rust-clippy
# https://github.com/rust-lang-nursery/rls
# rustup completions fish > ~/.config/fish/completions/rustup.fish
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = 'deoplete.nvim'
on_ft = ['rust']
build = './install.sh'
rev = 'next'
hook_source = '''
  set hidden
  let g:LanguageClient_serverCommands = {
      \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
      \ }
  let g:LanguageClient_autoStart = 1
  let g:LanguageClient_loggingLevel = 'DEBUG'
  set completefunc=LanguageClient#complete
  set formatexpr=LanguageClient_textDocument_rangeFormatting()
  nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
  nnoremap <silent> gr :call LanguageClient_textDocument_rename()<CR>
'''

# }}}}

# apiblueprint {{{
[[plugins]]
repo = 'kylef/apiblueprint.vim'
on_ft = ['apiblueprint']
hook_source = '''
  autocmd FileType apiblueprint nnoremap <C-b> :call GenerateRefract()<cr>
'''
# }}}}
