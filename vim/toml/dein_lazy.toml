# base {{{
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['ghcmod-vim']

# quickfixウィンドウ内でrを押すと、各行のテキスト部分が別バッファに書き出される。
# http://thinca.hatenablog.com/entry/20081107/1225997310
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = ['Qfreplace']

[[plugins]]
repo = 'scrooloose/nerdtree'
augroup = 'NERDTreeHijackNetrw'
hook_source = '''
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  let g:NERDTreeShowHidden=1
'''
hook_add = '''
  nmap <silent> <C-e> :NERDTreeToggle<CR>
  vmap <silent> <C-e> <Esc> :NERDTreeToggle<CR>
  omap <silent> <C-e> :NERDTreeToggle<CR>
'''

# :VO :set setの結果を確認するのに便利 http://nanasi.jp/articles/vim/viewoutput_vim.html
[[plugins]]
repo = 'vim-scripts/ViewOutput'
on_cmd = ['VO']

# 整列
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {n = '<Plug>'}
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_source = '''
  let g:easy_align_delimiters = {
              \ '>': { 'pattern': '>>\|=>\|>' },
              \ '/': {
              \     'pattern':         '//\+\|/\*\|\*/',
              \     'delimiter_align': 'l',
              \     'ignore_groups':   ['!Comment'] },
              \ ']': {
              \     'pattern':       '[[\]]',
              \     'left_margin':   0,
              \     'right_margin':  0,
              \     'stick_to_left': 0
              \   },
              \ ')': {
              \     'pattern':       '[()]',
              \     'left_margin':   0,
              \     'right_margin':  0,
              \     'stick_to_left': 0
              \   },
              \ 'd': {
              \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
              \     'left_margin':  0,
              \     'right_margin': 0
              \   }
              \ }
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
hook_post_source = '''
  call setup#smartinput#init()
  call smartinput_endwise#define_default_rules()
'''

[[plugins]]
repo = 'cohama/vim-smartinput-endwise'
on_source = 'kana/vim-smartinput'
hook_post_source = '''
  " neosnippet and neocomplete compatible
  call smartinput#map_to_trigger('i', '<Plug>(vimrc_cr)', '<Enter>', '<Enter>')
  imap <expr><CR> !pumvisible() ? "\<Plug>(vimrc_cr)" : neocomplete#close_popup()
'''

# コメントアウト
[[plugins]]
repo = 'tyru/caw.vim'
on_map = {vnx = '<Plug>'}
hook_add = '''
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

# Rで置換 yiwで単語をヤンクして変換したい個所に行きRiwで置換
# .を使うと同じ操作が他でもできる
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'kana/vim-operator-user'
on_map = {nvx = '<Plug>'}
hook_post_source = '''
  vnoremap <C-v> <Plug>(operator-replace)
'''
# }}}

# 多言語 {{{
[[plugins]]
repo = 'scrooloose/syntastic'
hook_source = '''
'''
on_ft = ['php']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['python', 'python3', 'djangohtml', 'go']
hook_source = '''
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1

  let g:ale_sign_column_always = 1
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1

  let g:ale_linters = {'python': ['flake8'], 'go': ['gometalinter'], }
  let g:ale_go_gometalinter_options = '--vendored-linters --disable-all --enable=gotype --enable=vet --enable=golint -t'
  let g:ale_open_list = 1
  let g:ale_sign_error = '✗'
  let g:ale_sign_warning = '⚠'
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_python_flake8_args = '--max-line-length=100'

'''
# }}}

# vim {{{
[[plugins]]
repo = 'vim-jp/vim-vimlparser'
on_ft = ['vim']

[[plugins]]
repo = 'syngan/vim-vimlint'
on_ft = ['vim']
hook_source = '''
  let g:vimlint#config = {
              \ 'EVL102': 1,
              \ 'EVL103': 1,
              \ 'EVL105': 1,
              \ 'EVL201': 1,
              \ 'EVL204': 1,
              \ 'EVL205': 1
              \ }
'''

# http://thinca.hatenablog.com/entry/20090625/1245864363
[[plugins]]
repo = 'thinca/vim-prettyprint'
on_ft = ['vim']

# vim変数の書き換え
[[plugins]]
repo = 'thinca/vim-editvar'
on_ft = ['vim']
# }}}

# haskell {{{
[[plugins]]
repo = 'kana/vim-filetype-haskell'
on_ft = ['haskell']

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
hook_add = '''
  augroup HaskellAugroup
    autocmd!
    " 使うにはcabal install ghc-modが必要
    " :GhcModTypeでカーソルがあるところの型が表示され
    " :GhcModTypeClearでハライトが消える
    autocmd FileType haskell nnoremap <Space>g :GhcModType<CR>
    autocmd FileType haskell nnoremap <Space>c :GhcModTypeClear<CR>
  augroup END
'''
on_ft = ['haskell']

[[plugins]]
repo = 'ujihisa/neco-ghc'
on_ft = ['haskell']
hook_source = '''
  setlocal omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'dag/vim2hs'
hook_source = '''
  " \をラムダにするのをやめる
  let g:haskell_conceal = 0
'''
on_ft = ['haskell']

[[plugins]]
repo = 'pbrisbin/vim-syntax-shakespeare'
on_ft = ['haskell']

[[plugins]]
repo = 'wting/lhaskell.vim'
on_ft = ['haskell']
# }}}}

# c c++用 {{{
[[plugins]]
repo = 'osyo-manga/vim-marching'
on_ft = ['c', 'cpp']
hook_source = '''
  let g:marching_clang_command = '/usr/bin/clang'
  " オプションを追加する
  " filetype=cpp に対して設定する場合
  let g:marching#clang_command#options = {'cpp' : '-std=gnu++1y'}
  " インクルードディレクトリのパスを設定
  " let g:marching_include_paths = [
  " \]
  " neocomplete.vim と併用して使用する場合
  let g:marching_enable_neocomplete = 1
  " 処理のタイミングを制御する
  " 短いほうがより早く補完ウィンドウが表示される
  " ただし、marching.vim 以外の処理にも影響するので注意する
  " set updatetime=200
'''
[[plugins]]
repo = 'vim-scripts/c.vim'
on_ft = ['c']

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp']

[[plugins]]
repo = 'vim-scripts/gtags.vim'
hook_add = '''
  augroup CCAugroup
    autocmd!
    autocmd FileType c, cpp nnoremap wq <C-w><C-w><C-w>q
    autocmd FileType c, cpp nnoremap wg :Gtags -g
    autocmd FileType c, cpp nnoremap wl :Gtags -f %<CR>
    autocmd FileType c, cpp nnoremap wj :Gtags <C-r><C-w><CR>
    autocmd FileType c, cpp nnoremap wk :Gtags -r <C-r><C-w><CR>
  augroup END
'''
on_ft = ['c', 'cpp']

[[plugins]]
repo = '5t111111/alt-gtags.vim'
hook_add = '''
  augroup CCAugroup
    autocmd!
    " 使うにはcabal install ghc-modが必要
    " :GhcModTypeでカーソルがあるところの型が表示され
    " :GhcModTypeClearでハライトが消える
    autocmd FileType c, cpp nnoremap <Space>a :AltGtags<CR>
    autocmd FileType c, cpp nnoremap <Space>f :AltGtags -f<CR>
    autocmd FileType c, cpp nnoremap <Space>r :AltGtags -r<CR>
    autocmd FileType c, cpp nnoremap <Space>s :AltGtags -s<CR>
    autocmd FileType c, cpp nnoremap <Space>m :ClangFormat<CR>
  augroup END
'''
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_source = '''
  let g:clang_format#command = 'clang-format-3.5'
  " ========== vim-clang-format の設定 ============
  " アクセス指定子は1インデント分下げる
  " 短い if 文は1行にまとめる
  " テンプレートの宣言(template<class ...>)後は必ず改行する
  " C++11 の機能を使う
  " {} の改行は Stroustrup スタイル（関数宣言時の { のみ括弧前で改行を入れる）
  let g:clang_format#style_options = {
              \ 'AccessModifierOffset' : -4,
              \ 'AllowShortIfStatementsOnASingleLine' : 'true',
              \ 'AlwaysBreakTemplateDeclarations' : 'true',
              \ 'Standard' : 'C++11',
              \ 'BreakBeforeBraces' : 'Stroustrup',
              \}
'''
on_ft = ['c', 'cpp']
# }}}}

# python  {{{
[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_source = '''
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#completions_enabled = 0
  let g:jedi#rename_command = '<Leader>R'
'''
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'nvie/vim-flake8'
hook_source = '''
  let g:no_flake8_maps = 1
  let g:flake8_show_in_gutter=1
'''
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'vim-scripts/python_fold'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo = 'tshirtman/vim-cython'
on_ft = ['cython']

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = ['jinja']
# }}}}

# ruby {{{
[[plugins]]
repo = 'alpaca-tc/alpaca_tags'
on_ft = ['ruby']

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_ft = ['ruby']

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby']
# }}}}

# javascript jsx {{{
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'jsx', 'javascript.jsx']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['javascript', 'jsx', 'javascript.jsx']
hook_source = '''
  let g:jsx_ext_required = 0
'''
# }}}}

# typescript {{{
repo = 'Quramy/tsuquyomi'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'Quramy/vim-js-pretty-template'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'Quramy/vim-dtsm'
on_ft = ['ts', 'typescript']
[[plugins]]
repo = 'mhartington/vim-typings'
on_ft = ['ts', 'typescript']
# }}}}

# elm {{{
[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = ['elm']

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['elm']
# }}}}

# fish {{{
[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']
# }}}}

# go {{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_source = '''
  "" highlight
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_term_enabled = 1
  " let g:go_auto_type_info = 1
  "" GoFmt時にインポートするパッケージを整理(GoFmtはファイル書き込み時に自動的に実行される)
  let g:go_fmt_command = "goimports"
'''
hook_add = '''
  augroup Gogroup 
    autocmd!
    autocmd FileType go nmap <Space>go <Plug>(go-info)
    autocmd FileType go nmap <Space>gr <Plug>(go-run)
    autocmd FileType go nmap <Space>gb <Plug>(go-build)
    autocmd FileType go nmap <Space>gt <Plug>(go-test)
    autocmd FileType go nmap <Space>gc <Plug>(go-coverage)
    autocmd FileType go nmap <Space>gd <Plug>(go-doc)
    autocmd FileType go nmap <Space>gv <Plug>(go-doc-vertical)
    autocmd FileType go nmap <Space>gi <Plug>(go-import)
    autocmd FileType go nmap <Space>gm <Plug>(go-implements)
    autocmd FileType go nmap <Space>df <Plug>(go-def)
    autocmd FileType go nmap <Space>ds <Plug>(go-def-split)
    autocmd FileType go nmap <Space>dv <Plug>(go-def-vertical)
    autocmd FileType go nmap <Space>dt <Plug>(go-def-tab)
    autocmd FileType go :highlight goErr cterm=bold ctermfg=211
    autocmd FileType go :match goErr /\<err\>/
  augroup END
'''
# }}}}

# nginx {{{
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']
# }}}}

# docker {{{
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile']
# }}}}

# yaml {{{
[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['yaml']
hook_source = '''
  let g:ansible_options = {'ignore_blank_lines': 0}
'''
[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = ['yaml']
# }}}}

# markdown  {{{
[[plugins]]
repo = 'vim-scripts/Markdown'
on_ft = ['markdown']
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
# }}}}

# json {{{
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''
# }}}}

# toml {{{
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
# }}}}
